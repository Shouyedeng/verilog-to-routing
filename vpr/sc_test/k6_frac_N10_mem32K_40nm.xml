<architecture>

  <models>

    <model name="jcb">
      <input_ports>
        <port name="dinA" combinational_sink_ports="dout"/>
        <port name="dinB" combinational_sink_ports="dout"/>
      </input_ports>
      <output_ports>
        <port name="dout"/>
      </output_ports>
    </model>
    
    <model name="jcb3">
      <input_ports>
        <port name="dinA" combinational_sink_ports="dout"/>
        <port name="dinB" combinational_sink_ports="dout"/>
        <port name="dinC" combinational_sink_ports="dout"/>
      </input_ports>
      <output_ports>
        <port name="dout"/>
      </output_ports>
    </model>

    <model name="jspl">
      <input_ports>
        <port name="din" combinational_sink_ports="doutA doutB"/>
      </input_ports>
      <output_ports>
        <port name="doutA"/>
        <port name="doutB"/>
      </output_ports>
    </model>
    
    <model name="jspl3">
      <input_ports>
        <port name="din" combinational_sink_ports="doutA doutB doutC"/>
      </input_ports>
      <output_ports>
        <port name="doutA"/>
        <port name="doutB"/>
        <port name="doutC"/>
      </output_ports>
    </model>
    
    <model name="jand">
      <input_ports>
        <port name="dinA" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="dinB" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="clk" is_clock="1"/>  <!-- memories are often clocked -->
      </input_ports>
      <output_ports>
        <port name="dout" clock="clk"/>   <!-- output can be broken down into smaller bit widths minimum size 1 -->
      </output_ports>
    </model>

    <model name="jor">
      <input_ports>
        <port name="dinA" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="dinB" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="clk" is_clock="1"/>  <!-- memories are often clocked -->
      </input_ports>
      <output_ports>
        <port name="dout" clock="clk"/>   <!-- output can be broken down into smaller bit widths minimum size 1 -->
      </output_ports>
    </model>

    <model name="jor3">
      <input_ports>
        <port name="dinA" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="dinB" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="dinC" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="clk" is_clock="1"/>  <!-- memories are often clocked -->
      </input_ports>
      <output_ports>
        <port name="dout" clock="clk"/>   <!-- output can be broken down into smaller bit widths minimum size 1 -->
      </output_ports>
    </model>

    <model name="jxor">
      <input_ports>
        <port name="dinA" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="dinB" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="clk" is_clock="1"/>  <!-- memories are often clocked -->
      </input_ports>
      <output_ports>
        <port name="dout" clock="clk"/>   <!-- output can be broken down into smaller bit widths minimum size 1 -->
      </output_ports>
    </model>

    <model name="jscdff">
      <input_ports>
        <port name="en" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <!--port name="en" combinational_sink_ports="dout"/-->  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="clear" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <!--port name="clear" combinational_sink_ports="dout"/-->  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="din" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="clk" is_clock="1"/>  <!-- memories are often clocked -->
      </input_ports>
      <output_ports>
        <port name="dout" clock="clk"/>   <!-- output can be broken down into smaller bit widths minimum size 1 -->
      </output_ports>
    </model>

    <model name="jnot">
      <input_ports>
        <port name="din" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="clk" is_clock="1"/>  <!-- memories are often clocked -->
      </input_ports>
      <output_ports>
        <port name="dout" clock="clk"/>   <!-- output can be broken down into smaller bit widths minimum size 1 -->
      </output_ports>
    </model>


  </models>
  <tiles>
    <tile name="io" area="0">
      <sub_tile name="io"  capacity="1">	   
      <equivalent_sites>
        <site pb_type="io"/>
      </equivalent_sites>
      <input name="outpad" num_pins="1"/>
      <output name="inpad" num_pins="1"/>
      <clock name="clock" num_pins="1"/>
      <fc in_type="frac" in_val="1.00" out_type="frac" out_val="1.00"/>
      <pinlocations pattern="custom">
        <loc side="left">io.outpad io.inpad io.clock</loc>
        <loc side="top">io.outpad io.inpad io.clock</loc>
        <loc side="right">io.outpad io.inpad io.clock</loc>
        <loc side="bottom">io.outpad io.inpad io.clock</loc>
      </pinlocations>
      </sub_tile>
    </tile>
    <tile name="memory" height="1" area="548000">
      <sub_tile name="memory">
      <equivalent_sites>
        <site pb_type="memory"/>
      </equivalent_sites>
      <input name="addr1" num_pins="15"/>
      <input name="addr2" num_pins="15"/>
      <input name="data" num_pins="64"/>
      <input name="we1" num_pins="1"/>
      <input name="we2" num_pins="1"/>
      <output name="out" num_pins="64"/>
      <clock name="clk" num_pins="1"/>
      <fc in_type="frac" in_val="1.00" out_type="frac" out_val="1.00"/>
      <pinlocations pattern="spread"/>
      </sub_tile>
    </tile>
  </tiles>

    <!-- Physical descriptions begin -->
  <layout>
    <auto_layout aspect_ratio="1.0">
    <!--fixed_layout name="SMARTCORE" width="101" height="42"-->
        <perimeter type="io" priority="100"/>
        <corners type="EMPTY" priority="101"/>
        <!--Column of 'memory' with 'EMPTY' blocks wherever a 'memory' does not fit. Vertical offset by 1 for perimeter.-->
        <col type="memory" startx="1" starty="1" repeatx="1" priority="20"/>
        <col type="EMPTY" startx="1" repeatx="1" starty="1" priority="19"/>
    </auto_layout>
    <!--/fixed_layout-->
  </layout>

  <device>
    <!-- VB & JL: Using Ian Kuon's transistor sizing and drive strength data for routing, at 40 nm. Ian used BPTM 
			     models. We are modifying the delay values however, to include metal C and R, which allows more architecture
			     experimentation. We are also modifying the relative resistance of PMOS to be 1.8x that of NMOS
			     (vs. Ian's 3x) as 1.8x lines up with Jeff G's data from a 45 nm process (and is more typical of 
			     45 nm in general). I'm upping the Rmin_nmos from Ian's just over 6k to nearly 9k, and dropping 
			     RminW_pmos from 18k to 16k to hit this 1.8x ratio, while keeping the delays of buffers approximately
			     lined up with Stratix IV. 
			     We are using Jeff G.'s capacitance data for 45 nm (in tech/ptm_45nm).
			     Jeff's tables list C in for transistors with widths in multiples of the minimum feature size (45 nm).
			     The minimum contactable transistor is 2.5 * 45 nm, so I need to multiply drive strength sizes in this file
	                     by 2.5x when looking up in Jeff's tables.
			     The delay values are lined up with Stratix IV, which has an architecture similar to this
			     proposed FPGA, and which is also 40 nm 
			     C_ipin_cblock: input capacitance of a track buffer, which VPR assumes is a single-stage
			     4x minimum drive strength buffer. -->
   
    <sizing R_minW_nmos="8926" R_minW_pmos="16067"/>
    <!-- The grid_logic_tile_area below will be used for all blocks that do not explicitly set their own (non-routing)
     	  area; set to 0 since we explicitly set the area of all blocks currently in this architecture file.
	  -->
		<area grid_logic_tile_area="0"/>
    <chan_width_distr>
      <x distr="uniform" peak="1.000000"/>
      <y distr="uniform" peak="1.000000"/>
    </chan_width_distr>
    <!--switch_block type="wilton" fs="3"/-->
    <switch_block type="universal" fs="3"/>
    <connection_block input_switch_name="ipin_cblock"/>
  </device>
  <switchlist>
	  <!-- VB: the mux_trans_size and buf_size data below is in minimum width transistor *areas*, assuming the purple
	       book area formula. This means the mux transistors are about 5x minimum drive strength.
	       We assume the first stage of the buffer is 3x min drive strength to be reasonable given the large 
	       mux transistors, and this gives a reasonable stage ratio of a bit over 5x to the second stage. We assume
	       the n and p transistors in the first stage are equal-sized to lower the buffer trip point, since it's fed
	       by a pass transistor mux. We can then reverse engineer the buffer second stage to hit the specified 
	       buf_size (really buffer area) - 16.2x minimum drive nmos and 1.8*16.2 = 29.2x minimum drive.
	       I then took the data from Jeff G.'s PTM modeling of 45 nm to get the Cin (gate of first stage) and Cout 
	       (diff of second stage) listed below.  Jeff's models are in tech/ptm_45nm, and are in min feature multiples.
	       The minimum contactable transistor is 2.5 * 45 nm, so I need to multiply the drive strength sizes above by 
	       2.5x when looking up in Jeff's tables.
	       Finally, we choose a switch delay (58 ps) that leads to length 4 wires having a delay equal to that of SIV of 126 ps.
	       This also leads to the switch being 46% of the total wire delay, which is reasonable. -->
    <!--switch type="mux" name="0" R="551" Cin=".77e-15" Cout="4e-15" Tdel="0" /-->
    <switch type="mux" name="0" R="0" Cin="0" Cout="0" Tdel="0" />
  <!--switch ipin_cblock resistance set to yeild for 4x minimum drive strength buffer-->
    <!--switch type="mux" name="ipin_cblock" R="2231.5" Cout="0." Cin="1.47e-15" Tdel="0" /-->
    <switch type="mux" name="ipin_cblock" R="0" Cout="0." Cin="0" Tdel="0" />
  </switchlist>
  <segmentlist>
    <!--- VB & JL: using ITRS metal stack data, 96 nm half pitch wires, which are intermediate metal width/space.  
			     With the 96 nm half pitch, such wires would take 60 um of height, vs. a 90 nm high (approximated as square) Stratix IV tile so this seems
			     reasonable. Using a tile length of 90 nm, corresponding to the length of a Stratix IV tile if it were square. -->
    <!--segment freq="1.000000" length="1" type="bidir" Rmetal="11" Cmetal="22.5e-15"-->
    <!--TODO: figure out how does vpr compute wire delay -->
    <segment freq="1.000000" length="1" type="bidir" Rmetal="1" Cmetal="2.39e-12">
      <wire_switch name="0"/>
      <opin_switch name="0"/>
      <sb type="pattern">1 1</sb>
      <cb type="pattern">1</cb>
    </segment>
  </segmentlist>

  <complexblocklist>

    <!-- Define I/O pads begin -->
    <!-- Capacity is a unique property of I/Os, it is the maximum number of I/Os that can be placed at the same (X,Y) location on the FPGA -->
	  <!-- Not sure of the area of an I/O (varies widely), and it's not relevant to the design of the FPGA core, so we're setting it to 0. -->
    <pb_type name="io">
      <input name="outpad" num_pins="1"/>
      <output name="inpad" num_pins="1"/>
      <clock name="clock" num_pins="1"/>

      <!-- IOs can operate as either inputs or outputs.
	     Delays below come from Ian Kuon. They are small, so they should be interpreted as
	     the delays to and from registers in the I/O (and generally I/Os are registered 
	     today and that is when you timing analyze them.
	     -->
      <mode name="inpad">
        <pb_type name="inpad" blif_model=".input" num_pb="1">
          <output name="inpad" num_pins="1"/>
        </pb_type>
        <interconnect>
          <direct name="inpad" input="inpad.inpad" output="io.inpad">
            <delay_constant max="0" in_port="inpad.inpad" out_port="io.inpad"/>
          </direct>
        </interconnect>

      </mode>
      <mode name="outpad">
        <pb_type name="outpad" blif_model=".output" num_pb="1">
          <input name="outpad" num_pins="1"/>
        </pb_type>
        <interconnect>
          <direct name="outpad" input="io.outpad" output="outpad.outpad">
            <!--delay_constant max="1.394e-11" in_port="io.outpad" out_port="outpad.outpad"/-->
            <delay_constant max="0" in_port="io.outpad" out_port="outpad.outpad"/>
          </direct>
        </interconnect>
      </mode>

      <!-- Every input pin is driven by 15% of the tracks in a channel, every output pin is driven by 10% of the tracks in a channel -->
      <fc in_type="frac" in_val="1.00" out_type="frac" out_val="1.00"/>

      <!-- IOs go on the periphery of the FPGA, for consistency, 
          make it physically equivalent on all sides so that only one definition of I/Os is needed.
          If I do not make a physically equivalent definition, then I need to define 4 different I/Os, one for each side of the FPGA
        -->
      <pinlocations pattern="custom">
        <loc side="left">io.outpad io.inpad io.clock</loc>
        <loc side="top">io.outpad io.inpad io.clock</loc>
        <loc side="right">io.outpad io.inpad io.clock</loc>
        <loc side="bottom">io.outpad io.inpad io.clock</loc>
      </pinlocations>

      <!-- Place I/Os on the sides of the FPGA -->
      <power method="ignore"/>			
    </pb_type>
    <!-- Define I/O pads ends -->

    

    <!-- Define fracturable memory begin -->
    <!-- 32 Kb Memory that can operate from 512x64 to 32Kx1 for single-port mode and 1024x32 to 32Kx1 for dual-port mode.  
           Area and delay based off Stratix IV 9K and 144K memories (delay from linear interpolation, Tsu(483 ps, 636 ps) Tco(1084ps, 1969ps)).  
           Input delay = 204ps (from Stratix IV LAB line) - 72ps (this architecture does not lump connection box delay in internal delay)
           Output delay = M4K buffer 50ps

           Area is obtained by appropriately scaling and adjusting the published Stratix III (which is architecturally identical to Stratix IV)
           data from H. Wong, V. Betz and J. Rose, "Comparing FPGA vs. Custom CMOS and the Impact on Processor Microarchitecture", FPGA 2011.
           Linearly interpolating (by bit count) between the M9k and M144k areas to obtain an M32k (our RAM size) point yields a 65 nm area of
           of 0.153 mm^2. Interpolating based on port count between the RAMs would instead yield an area of 0.209 mm^2 for our 32 kB RAM; since 
           bit count accounts for more area than ports for a RAM this size we choose the bit count interpolation; however, since the port interpolation
           is not radically different this also gives us confidence that interpolating based on bits is OK, but slightly underpredicts area.
           Scaling to 40 nm^2 yields .0579 mm^2, and converting to MWTUs at 60 L^2 / MWTU yields 604,000 MWTUs. This includes routing. A Stratix IV
           M9K RAM is one row high and hence has one routing tile (one horizonal and one vertical routing segment area). An M144k RAM has 8 such tiles.
           Linearly interpolating on
           bits to 32 kb yields 2.2 routing tiles incorporated in the area number above. The inter-block routing represents 30% of the area of a logic 
           tile according to D. Lewis et al, "Architectural Enhancements in Stratix V," FPGA 2013. Hence we should subtract 0.3 * 2.2 * 84,375 MWTUs to
           obtain a RAM core area (not including inter-block routing) of 548,000 MWTU areas for our 32 kb RAM in a 40 nm process.
    -->
    <!--pb_type name="memory" height="1" area="548000"-->
    <pb_type name="memory"> 
      <input name="addr1" num_pins="15"/>
      <input name="addr2" num_pins="15"/>
      <input name="data" num_pins="64"/>
      <input name="we1" num_pins="1"/>
      <input name="we2" num_pins="1"/>
      <output name="out" num_pins="64"/>
      <clock name="clk" num_pins="1"/>

      <mode name="mem_32768x1_2_sp">
        <pb_type name="mem_32768x1_2_sp" blif_model=".subckt jand" class="memory" num_pb="1">
          <input name="dinA" num_pins="1" port_class="data_in"/>
          <input name="dinB" num_pins="1" port_class="data_in"/>
          <output name="dout" num_pins="1" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="0" port="mem_32768x1_2_sp.dinA" clock="clk"/>
          <T_setup value="0" port="mem_32768x1_2_sp.dinB" clock="clk"/>
          <T_hold value="9.8e-12" port="mem_32768x1_2_sp.dinA" clock="clk"/>
          <T_hold value="9.8e-12" port="mem_32768x1_2_sp.dinB" clock="clk"/>
          <T_clock_to_Q max="7.75e-12" port="mem_32768x1_2_sp.dout" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="0"/>					
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="data1" input="memory.data[0:0]" output="mem_32768x1_2_sp.dinA">
            <delay_constant max="0" in_port="memory.data[0:0]" out_port="mem_32768x1_2_sp.dinA"/>
          </direct>
          <direct name="data2" input="memory.data[1:1]" output="mem_32768x1_2_sp.dinB">
            <delay_constant max="0" in_port="memory.data[1:1]" out_port="mem_32768x1_2_sp.dinB"/>
          </direct>
          <direct name="dataout1" input="mem_32768x1_2_sp.dout" output="memory.out[0:0]">
            <delay_constant max="0" in_port="mem_32768x1_2_sp.dout" out_port="memory.out[0:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_32768x1_2_sp.clk">
          </direct>
        </interconnect>
      </mode> 
      
      <mode name="mem_32768x1_or_sp">
        <pb_type name="mem_32768x1_or_sp" blif_model=".subckt jor" class="memory" num_pb="1">
          <input name="dinA" num_pins="1" port_class="data_in"/>
          <input name="dinB" num_pins="1" port_class="data_in"/>
          <output name="dout" num_pins="1" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="0" port="mem_32768x1_or_sp.dinA" clock="clk"/>
          <T_setup value="0" port="mem_32768x1_or_sp.dinB" clock="clk"/>
          <T_hold value="9.8e-12" port="mem_32768x1_or_sp.dinA" clock="clk"/>
          <T_hold value="9.8e-12" port="mem_32768x1_or_sp.dinB" clock="clk"/>
          <T_clock_to_Q max="7.75e-12" port="mem_32768x1_or_sp.dout" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="0"/>					
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="data1" input="memory.data[0:0]" output="mem_32768x1_or_sp.dinA">
            <delay_constant max="0" in_port="memory.data[0:0]" out_port="mem_32768x1_or_sp.dinA"/>
          </direct>
          <direct name="data2" input="memory.data[1:1]" output="mem_32768x1_or_sp.dinB">
            <delay_constant max="0" in_port="memory.data[1:1]" out_port="mem_32768x1_or_sp.dinB"/>
          </direct>
          <direct name="dataout1" input="mem_32768x1_or_sp.dout" output="memory.out[0:0]">
            <delay_constant max="0" in_port="mem_32768x1_or_sp.dout" out_port="memory.out[0:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_32768x1_or_sp.clk">
          </direct>
        </interconnect>
      </mode> 
      
      <mode name="mem_32768x1_or3_sp">
        <pb_type name="mem_32768x1_or3_sp" blif_model=".subckt jor3" class="memory" num_pb="1">
          <input name="dinA" num_pins="1" port_class="data_in"/>
          <input name="dinB" num_pins="1" port_class="data_in"/>
          <input name="dinC" num_pins="1" port_class="data_in"/>
          <output name="dout" num_pins="1" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="0" port="mem_32768x1_or3_sp.dinA" clock="clk"/>
          <T_setup value="0" port="mem_32768x1_or3_sp.dinB" clock="clk"/>
          <T_setup value="0" port="mem_32768x1_or3_sp.dinC" clock="clk"/>
          <T_hold value="9.8e-12" port="mem_32768x1_or3_sp.dinA" clock="clk"/>
          <T_hold value="9.8e-12" port="mem_32768x1_or3_sp.dinB" clock="clk"/>
          <T_hold value="9.8e-12" port="mem_32768x1_or3_sp.dinC" clock="clk"/>
          <T_clock_to_Q max="7.75e-12" port="mem_32768x1_or3_sp.dout" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="0"/>					
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="data1" input="memory.data[0:0]" output="mem_32768x1_or3_sp.dinA">
            <delay_constant max="0" in_port="memory.data[0:0]" out_port="mem_32768x1_or3_sp.dinA"/>
          </direct>
          <direct name="data2" input="memory.data[1:1]" output="mem_32768x1_or3_sp.dinB">
            <delay_constant max="0" in_port="memory.data[1:1]" out_port="mem_32768x1_or3_sp.dinB"/>
          </direct>
          <direct name="data3" input="memory.data[2:2]" output="mem_32768x1_or3_sp.dinC">
            <delay_constant max="0" in_port="memory.data[2:2]" out_port="mem_32768x1_or3_sp.dinC"/>
          </direct>
          <direct name="dataout1" input="mem_32768x1_or3_sp.dout" output="memory.out[0:0]">
            <delay_constant max="0" in_port="mem_32768x1_or3_sp.dout" out_port="memory.out[0:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_32768x1_or3_sp.clk">
          </direct>
        </interconnect>
      </mode> 
      
      <mode name="mem_32768x1_10_sp">
        <pb_type name="mem_32768x1_10_sp" blif_model=".subckt jxor" class="memory" num_pb="1">
          <input name="dinA" num_pins="1" port_class="data_in"/>
          <input name="dinB" num_pins="1" port_class="data_in"/>
          <output name="dout" num_pins="1" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="5.42e-12" port="mem_32768x1_10_sp.dinA" clock="clk"/>
          <T_setup value="5.42e-12" port="mem_32768x1_10_sp.dinB" clock="clk"/>
          <T_hold value="7.41e-12" port="mem_32768x1_10_sp.dinA" clock="clk"/>
          <T_hold value="7.41e-12" port="mem_32768x1_10_sp.dinB" clock="clk"/>
          <T_clock_to_Q max="7.18e-12" port="mem_32768x1_10_sp.dout" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="0"/>					
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="data1" input="memory.data[0:0]" output="mem_32768x1_10_sp.dinA">
            <delay_constant max="0" in_port="memory.data[0:0]" out_port="mem_32768x1_10_sp.dinA"/>
          </direct>
          <direct name="data2" input="memory.data[1:1]" output="mem_32768x1_10_sp.dinB">
            <delay_constant max="0" in_port="memory.data[1:1]" out_port="mem_32768x1_10_sp.dinB"/>
          </direct>
          <direct name="dataout1" input="mem_32768x1_10_sp.dout" output="memory.out[0:0]">
            <delay_constant max="0" in_port="mem_32768x1_10_sp.dout" out_port="memory.out[0:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_32768x1_10_sp.clk">
          </direct>
        </interconnect>
      </mode>
 
      <mode name="mem_32768x1_3_sp">
        <pb_type name="mem_32768x1_3_sp" blif_model=".subckt jscdff" class="memory" num_pb="1">
          <input name="en" num_pins="1" port_class="data_in"/>
          <input name="clear" num_pins="1" port_class="data_in"/>
          <input name="din" num_pins="1" port_class="data_in"/>
          <output name="dout" num_pins="1" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="2.62e-12" port="mem_32768x1_3_sp.en" clock="clk"/>
          <T_setup value="2.62e-12" port="mem_32768x1_3_sp.clear" clock="clk"/>
          <T_setup value="2.62e-12" port="mem_32768x1_3_sp.din" clock="clk"/>
          <T_hold value="4.67e-12" port="mem_32768x1_3_sp.en" clock="clk"/>
          <T_hold value="4.67e-12" port="mem_32768x1_3_sp.clear" clock="clk"/>
          <T_hold value="4.67e-12" port="mem_32768x1_3_sp.din" clock="clk"/>
          <T_clock_to_Q max="4.56e-12" port="mem_32768x1_3_sp.dout" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="0"/>					
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="data1" input="memory.data[0:0]" output="mem_32768x1_3_sp.en">
            <delay_constant max="0" in_port="memory.data[0:0]" out_port="mem_32768x1_3_sp.en"/>
          </direct>
          <direct name="data2" input="memory.data[1:1]" output="mem_32768x1_3_sp.clear">
            <delay_constant max="0" in_port="memory.data[1:1]" out_port="mem_32768x1_3_sp.clear"/>
          </direct>
          <direct name="data3" input="memory.data[2:2]" output="mem_32768x1_3_sp.din">
            <delay_constant max="0" in_port="memory.data[2:2]" out_port="mem_32768x1_3_sp.din"/>
          </direct>
          <direct name="dataout1" input="mem_32768x1_3_sp.dout" output="memory.out[0:0]">
            <delay_constant max="0" in_port="mem_32768x1_3_sp.dout" out_port="memory.out[0:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_32768x1_3_sp.clk">
          </direct>
        </interconnect>
      </mode>

      <mode name="cb2">
        <pb_type name="cb2" blif_model=".subckt jcb" num_pb="1">
           <input name="dinA" num_pins="1"/>
           <input name="dinB" num_pins="1"/>
           <output name="dout" num_pins="1"/>
           <delay_constant max="7.52e-12" in_port="cb2.dinA" out_port="cb2.dout"/>
           <delay_constant max="7.52e-12" in_port="cb2.dinB" out_port="cb2.dout"/>
        </pb_type>

        <interconnect>
          <direct name="a2a" input="memory.data[0:0]" output="cb2.dinA">
          </direct>
          <direct name="b2b" input="memory.data[1:1]" output="cb2.dinB">
          </direct>
          <direct name="out2out" input="cb2.dout" output="memory.out[0:0]">
          </direct>
        </interconnect>
        <power method="pin-toggle">
          <port name="dinA" energy_per_toggle="0"/>
          <port name="dinB" energy_per_toggle="0"/>
          <static_power power_per_instance="0.0"/>
        </power>
     </mode>

      <mode name="cb3">
        <pb_type name="cb3" blif_model=".subckt jcb3" num_pb="1">
           <input name="dinA" num_pins="1"/>
           <input name="dinB" num_pins="1"/>
           <input name="dinC" num_pins="1"/>
           <output name="dout" num_pins="1"/>
           <delay_constant max="7.52e-12" in_port="cb3.dinA" out_port="cb3.dout"/>
           <delay_constant max="7.52e-12" in_port="cb3.dinB" out_port="cb3.dout"/>
           <delay_constant max="7.52e-12" in_port="cb3.dinC" out_port="cb3.dout"/>
        </pb_type>

        <interconnect>
          <direct name="a2a" input="memory.data[0:0]" output="cb3.dinA">
          </direct>
          <direct name="b2b" input="memory.data[1:1]" output="cb3.dinB">
          </direct>
          <direct name="c2c" input="memory.data[2:2]" output="cb3.dinC">
          </direct>
          <direct name="out2out" input="cb3.dout" output="memory.out[0:0]">
          </direct>
        </interconnect>
        <power method="pin-toggle">
          <port name="dinA" energy_per_toggle="0"/>
          <port name="dinB" energy_per_toggle="0"/>
          <port name="dinC" energy_per_toggle="0"/>
          <static_power power_per_instance="0.0"/>
        </power>
     </mode>

      <mode name="spl2">
        <pb_type name="spl2" blif_model=".subckt jspl" num_pb="1">
           <input name="din" num_pins="1"/>
           <output name="doutA" num_pins="1"/>
           <output name="doutB" num_pins="1"/>
           <delay_constant max="4.85e-12" in_port="spl2.din" out_port="spl2.doutA"/>
           <delay_constant max="4.85e-12" in_port="spl2.din" out_port="spl2.doutB"/>
        </pb_type>

        <interconnect>
          <direct name="a2a" input="memory.data[0:0]" output="spl2.din">
          </direct>
          <direct name="out2out" input="spl2.doutA" output="memory.out[0:0]">
          </direct>
          <direct name="out2out_1" input="spl2.doutB" output="memory.out[1:1]">
          </direct>
        </interconnect>
        <power method="pin-toggle">
          <port name="din" energy_per_toggle="0"/>
          <static_power power_per_instance="0.0"/>
        </power>
     </mode>

      <mode name="spl3">
        <pb_type name="spl3" blif_model=".subckt jspl3" num_pb="1">
           <input name="din" num_pins="1"/>
           <output name="doutA" num_pins="1"/>
           <output name="doutB" num_pins="1"/>
           <output name="doutC" num_pins="1"/>
           <delay_constant max="5.64e-12" in_port="spl3.din" out_port="spl3.doutA"/>
           <delay_constant max="5.64e-12" in_port="spl3.din" out_port="spl3.doutB"/>
           <delay_constant max="5.64e-12" in_port="spl3.din" out_port="spl3.doutC"/>
        </pb_type>

        <interconnect>
          <direct name="a2a" input="memory.data[0:0]" output="spl3.din">
          </direct>
          <direct name="out2out" input="spl3.doutA" output="memory.out[0:0]">
          </direct>
          <direct name="out2out_1" input="spl3.doutB" output="memory.out[1:1]">
          </direct>
          <direct name="out2out_2" input="spl3.doutC" output="memory.out[2:2]">
          </direct>
        </interconnect>
        <power method="pin-toggle">
          <port name="din" energy_per_toggle="0"/>
          <static_power power_per_instance="0.0"/>
        </power>
     </mode>

      <mode name="mem_32768x1_4_sp">
        <pb_type name="mem_32768x1_4_sp" blif_model=".subckt jnot" class="memory" num_pb="1">
          <input name="din" num_pins="1" port_class="data_in"/>
          <output name="dout" num_pins="1" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="5e-12" port="mem_32768x1_4_sp.din" clock="clk"/>
          <T_hold value="5e-12" port="mem_32768x1_4_sp.din" clock="clk"/>
          <T_clock_to_Q max="5e-12" port="mem_32768x1_4_sp.dout" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="0"/>					
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="data1" input="memory.data[0:0]" output="mem_32768x1_4_sp.din">
            <delay_constant max="0" in_port="memory.data[0:0]" out_port="mem_32768x1_4_sp.din"/>
          </direct>
          <direct name="dataout1" input="mem_32768x1_4_sp.dout" output="memory.out[0:0]">
            <delay_constant max="0" in_port="mem_32768x1_4_sp.dout" out_port="memory.out[0:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_32768x1_4_sp.clk">
          </direct>
        </interconnect>
      </mode> 
 
      <!-- Every input pin is driven by 15% of the tracks in a channel, every output pin is driven by 10% of the tracks in a channel -->
      <fc in_type="frac" in_val="1.00" out_type="frac" out_val="1.00"/>
      <pinlocations pattern="spread"/>

      <!-- Place this memory block every 8 columns from (and including) the second column -->
      <power method="sum-of-children"/>
    </pb_type>
    <!-- Define fracturable memory end -->


  </complexblocklist>
  <power>
    <!--local_interconnect C_wire="2.5e-10"/-->
    <local_interconnect C_wire="2.39e-12"/>
    <mux_transistor_size mux_transistor_size="3"/>
    <FF_size FF_size="4"/>
    <LUT_transistor_size LUT_transistor_size="4"/> 
  </power>
  <clocks>
    <!--clock buffer_size="auto" C_wire="2.5e-10"/-->
    <clock buffer_size="auto" C_wire="2.39e-12"/>
  </clocks>
</architecture>
